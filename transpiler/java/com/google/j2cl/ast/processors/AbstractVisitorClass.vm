package ${packageName};

import java.util.ArrayDeque;
import java.util.Deque;

public abstract class AbstractVisitor extends ProcessorPrivate implements Visitor {
#foreach($clazz in $classes)
#if(${clazz.isContext()})

  private Deque<${clazz.SimpleName}> stackOf${clazz.SimpleName} = new ArrayDeque<>();
  final void push${clazz.SimpleName}(${clazz.SimpleName} node) {
    stackOf${clazz.SimpleName}.push(node);
  }
  final ${clazz.SimpleName} pop${clazz.SimpleName}() {
    return stackOf${clazz.SimpleName}.pop();
  }
  public final ${clazz.SimpleName} getCurrent${clazz.SimpleName}() {
    return stackOf${clazz.SimpleName}.peek();
  }
#end
#end
#foreach($clazz in $classes)

  @Override
  final boolean shouldProcess${clazz.SimpleName}(${clazz.SimpleName} node) {
    return enter${clazz.SimpleName}(node);
  }
#end
#foreach($clazz in $classes)

  @Override
  final ${clazz.TopClassName} postProcess${clazz.SimpleName}(${clazz.SimpleName} node) {
    exit${clazz.SimpleName}(node);
    return node;
  }
#end
#foreach($clazz in $classes)

  @Override
  public boolean enter${clazz.SimpleName}(${clazz.SimpleName} node) {
#if(${clazz.isTop()})
    return true;
#else
    return enter${clazz.SuperclassName}(node);
#end
  }
#end

#foreach($clazz in $classes)
  @Override
  public void exit${clazz.SimpleName}(${clazz.SimpleName} node) {
#if(!${clazz.isTop()})
    exit${clazz.SuperclassName}(node);
#end
  }
#end
}