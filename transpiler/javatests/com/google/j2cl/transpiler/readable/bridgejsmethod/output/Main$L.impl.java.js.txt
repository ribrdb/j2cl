goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.L$impl');


const K = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.K$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template L1
 * @extends {K<?string, L1>}
 */
class L extends K {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template L1
   * @return {!L<L1>}
   * @public
   */
  static $create__() {
    L.$clinit();
    let $instance = new L();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_L__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_L__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_K__();
  }

  /**
   * @param {?string} string_1
   * @param {L1} l1
   * @return {void}
   * @public
   */
  fun(string_1, l1) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*} arg1
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object__java_lang_Object_$pp_com_google_j2cl_transpiler_readable_bridgejsmethod(
      arg0, arg1) {
    this.fun(/**@type {?string} */ ($Casts.$to(arg0, j_l_String)), arg1);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    L.$clinit = (() => {});
    L.$loadModules();
    K.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof L;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, L);
  }

  /**
   * @public
   */
  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    L, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$L');



exports = L;
//# sourceMappingURL=Main$L.js.map