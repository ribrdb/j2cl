goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.R$impl');


const Q = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.Q$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');


/**
 * @abstract
 */
class R extends Q {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R;
  }

  /**
   * @param {Main} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Q__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
        $outer_this);
  }

  /**
   * @override
   * @return {?string}
   * @public
   */
  getKey() {
    return null;
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    R.$clinit = (() => {});
    R.$loadModules();
    Q.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof R;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, R);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    R, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$R');



exports = R;
//# sourceMappingURL=Main$R.js.map