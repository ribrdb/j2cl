goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.E$impl');


const B = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');
const J = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.J$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @implements {J<?string>}
 */
class E extends B {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!E}
   * @public
   */
  static $create__() {
    E.$clinit();
    let $instance = new E();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_E__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_E__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_B__();
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m_bar__java_lang_Object(arg0) {
    super.bar(/**@type {?string} */ ($Casts.$to(arg0, j_l_String)));
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {?string}
   * @public
   */
  fun(arg0) {
    return super.fun(/**@type {?string} */ ($Casts.$to(arg0, j_l_String)));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    E.$clinit = (() => {});
    E.$loadModules();
    B.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof E;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, E);
  }

  /**
   * @public
   */
  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    E, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$E');


J.$markImplementor(E);


exports = E;
//# sourceMappingURL=Main$E.js.map