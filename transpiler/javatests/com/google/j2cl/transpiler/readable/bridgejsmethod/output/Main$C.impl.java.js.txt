goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.C$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {A<Integer>}
 */
class C extends A {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!C}
   * @public
   */
  static $create__() {
    C.$clinit();
    let $instance = new C();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_C__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_C__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_A__();
  }

  /**
   * @param {Integer} i
   * @return {Integer}
   * @public
   */
  m_fun__java_lang_Integer(i) {
    return i;
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {Integer}
   * @public
   */
  fun(arg0) {
    return this.m_fun__java_lang_Integer(
        /**@type {Integer} */ ($Casts.$to(arg0, Integer)));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    C.$clinit = (() => {});
    C.$loadModules();
    A.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof C;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, C);
  }

  /**
   * @public
   */
  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    C, 'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$C');



exports = C;
//# sourceMappingURL=Main$C.js.map