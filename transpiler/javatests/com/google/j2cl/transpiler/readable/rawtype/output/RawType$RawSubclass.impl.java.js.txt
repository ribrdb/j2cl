goog.module('com.google.j2cl.transpiler.readable.rawtype.RawType.RawSubclass$impl');


const I = goog.require('com.google.j2cl.transpiler.readable.rawtype.RawType.I$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let RawType = goog.forwardDeclare('com.google.j2cl.transpiler.readable.rawtype.RawType$impl');


/**
 * @implements {I}
 */
class RawSubclass extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!RawSubclass}
   * @public
   */
  static $create__() {
    RawSubclass.$clinit();
    let $instance = new RawSubclass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_rawtype_RawType_RawSubclass__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_rawtype_RawType_RawSubclass__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @param {RawType} t
   * @return {void}
   * @public
   */
  m_f__com_google_j2cl_transpiler_readable_rawtype_RawType(t) {}

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    RawSubclass.$clinit = (() => {});
    RawSubclass.$loadModules();
    j_l_Object.$clinit();
    I.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof RawSubclass;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, RawSubclass);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    RawSubclass,
    'com.google.j2cl.transpiler.readable.rawtype.RawType$RawSubclass');


I.$markImplementor(RawSubclass);


exports = RawSubclass;
//# sourceMappingURL=RawType$RawSubclass.js.map