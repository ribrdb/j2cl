goog.module('com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface$impl');


const MyInterface = goog.require('com.google.j2cl.transpiler.readable.interfacejsbridge.MyInterface$impl');
const MyJsInterface = goog.require('com.google.j2cl.transpiler.readable.interfacejsbridge.MyJsInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface.$LambdaAdaptor$impl');


/**
 * @interface
 * @extends {MyJsInterface}
 * @extends {MyInterface}
 */
class SubInterface {
  /**
   * @abstract
   * @override
   * @param {number} a
   * @return {number}
   * @public
   */
  foo(a) {}

  /**
   * @param {?function(number):number} fn
   * @return {SubInterface}
   * @public
   */
  static $adapt(fn) {
    SubInterface.$clinit();
    return new $LambdaAdaptor(fn);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    SubInterface.$clinit = (() => {});
    SubInterface.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    MyJsInterface.$markImplementor(classConstructor);
    MyInterface.$markImplementor(classConstructor);
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_interfacejsbridge_SubInterface =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_interfacejsbridge_SubInterface;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_interfacejsbridge_SubInterface;
  }

  /**
   * @public
   */
  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    SubInterface,
    'com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface');


SubInterface.$markImplementor(/** @type {Function} */ (SubInterface));


exports = SubInterface;
//# sourceMappingURL=SubInterface.js.map