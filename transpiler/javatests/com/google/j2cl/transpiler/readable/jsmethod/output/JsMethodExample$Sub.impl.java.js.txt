goog.module('com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample.Sub$impl');


const Base = goog.require('com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample.Base$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {Base<?string>}
 * @implements {I}
 */
class Sub extends Base {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!Sub}
   * @public
   */
  static $create__() {
    Sub.$clinit();
    let $instance = new Sub();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsmethod_JsMethodExample_Sub__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsmethod_JsMethodExample_Sub__() {
    this.$ctor__com_google_j2cl_transpiler_readable_jsmethod_JsMethodExample_Base__();
  }

  /**
   * @param {?string} s
   * @return {void}
   * @public
   */
  m_m__java_lang_String(s) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m(arg0) {
    this.m_m__java_lang_String(
        /**@type {?string} */ ($Casts.$to(arg0, j_l_String)));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Sub.$clinit = (() => {});
    Sub.$loadModules();
    Base.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Sub;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Sub);
  }

  /**
   * @public
   */
  static $loadModules() {
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    Sub, 'com.google.j2cl.transpiler.readable.jsmethod.JsMethodExample$Sub');


I.$markImplementor(Sub);


exports = Sub;
//# sourceMappingURL=JsMethodExample$Sub.js.map