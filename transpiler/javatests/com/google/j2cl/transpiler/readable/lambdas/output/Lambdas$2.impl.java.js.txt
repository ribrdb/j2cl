goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.$2$impl');


const Functional = goog.require('com.google.j2cl.transpiler.readable.lambdas.Lambdas.Functional$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template T
 * @implements {Functional<T>}
 */
class $2 extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template T
   * @return {!$2<T>}
   * @public
   */
  static $create__() {
    $2.$clinit();
    let $instance = new $2();
    $instance.$ctor__com_google_j2cl_transpiler_readable_lambdas_Lambdas_2__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdas_Lambdas_2__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @param {Functional<T>} f
   * @return {Functional<T>}
   * @public
   */
  m_wrap__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Functional(f) {
    return null;
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $2.$clinit = (() => {});
    $2.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $2;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $2);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $2, 'com.google.j2cl.transpiler.readable.lambdas.Lambdas$2');


Functional.$markImplementor($2);


exports = $2;
//# sourceMappingURL=Lambdas$2.js.map