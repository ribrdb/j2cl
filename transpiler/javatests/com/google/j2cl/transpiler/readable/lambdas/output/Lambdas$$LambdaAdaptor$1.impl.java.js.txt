goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.$LambdaAdaptor$1$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.Thenable.$Overlay$impl');
let Throwable = goog.forwardDeclare('java.lang.Throwable$impl');


/**
 * @template T
 */
class $LambdaAdaptor$1 extends j_l_Object {
  /**
   * @param {?function(?function(T):?void, ?function(Throwable):?void):void} fn
   * @public
   */
  constructor(fn) {
    $LambdaAdaptor$1.$clinit();
    super();
    /**
     * @public {?function(?function(T):?void, ?function(Throwable):?void):void}
     */
    this.f_$$fn__com_google_j2cl_transpiler_readable_lambdas_Lambdas_$LambdaAdaptor$1;
    this.$ctor__com_google_j2cl_transpiler_readable_lambdas_Lambdas_$LambdaAdaptor$1__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Thenable_$JsFunction(
        fn);
  }

  /**
   * @param {?function(?function(T):?void, ?function(Throwable):?void):void} fn
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdas_Lambdas_$LambdaAdaptor$1__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Thenable_$JsFunction(
      fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_lambdas_Lambdas_$LambdaAdaptor$1 =
        fn;
  }

  /**
   * @param {?function(T):?void} arg0
   * @param {?function(Throwable):?void} arg1
   * @return {void}
   * @public
   */
  then(arg0, arg1) {
    {
      let $function =
          this.f_$$fn__com_google_j2cl_transpiler_readable_lambdas_Lambdas_$LambdaAdaptor$1;
      $function(arg0, arg1);
    }
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $LambdaAdaptor$1.$clinit = (() => {});
    $LambdaAdaptor$1.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $LambdaAdaptor$1;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$1);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $LambdaAdaptor$1,
    'com.google.j2cl.transpiler.readable.lambdas.Lambdas$$LambdaAdaptor$1');



exports = $LambdaAdaptor$1;
//# sourceMappingURL=Lambdas$$LambdaAdaptor$1.js.map