goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.FunctionalInterface$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.FunctionalInterface.$LambdaAdaptor$impl');


/**
 * @interface
 */
class FunctionalInterface {
  /**
   * @abstract
   * @param {number} i
   * @return {number}
   * @public
   */
  m_m__int(i) {}

  /**
   * @param {?function(number):number} fn
   * @return {FunctionalInterface}
   * @public
   */
  static $adapt(fn) {
    FunctionalInterface.$clinit();
    return new $LambdaAdaptor(fn);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    FunctionalInterface.$clinit = (() => {});
    FunctionalInterface.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_FunctionalInterface =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_FunctionalInterface;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_FunctionalInterface;
  }

  /**
   * @public
   */
  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdas.Lambdas.FunctionalInterface.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    FunctionalInterface,
    'com.google.j2cl.transpiler.readable.lambdas.Lambdas$FunctionalInterface');


FunctionalInterface.$markImplementor(
    /** @type {Function} */ (FunctionalInterface));


exports = FunctionalInterface;
//# sourceMappingURL=Lambdas$FunctionalInterface.js.map