goog.module('com.google.j2cl.transpiler.readable.anonymousinnerclass.AnonymousInnerClass.$1$impl');


const InnerClass = goog.require('com.google.j2cl.transpiler.readable.anonymousinnerclass.AnonymousInnerClass.InnerClass$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AnonymousInnerClass = goog.forwardDeclare('com.google.j2cl.transpiler.readable.anonymousinnerclass.AnonymousInnerClass$impl');


class $1 extends InnerClass {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {AnonymousInnerClass} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass_1;
  }

  /**
   * @param {AnonymousInnerClass} $outer_this
   * @return {!$1}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass(
      $outer_this) {
    $1.$clinit();
    let $instance = new $1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass_1__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass(
            $outer_this);
    return $instance;
  }

  /**
   * @param {AnonymousInnerClass} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass_1__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass_1 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass_InnerClass__com_google_j2cl_transpiler_readable_anonymousinnerclass_AnonymousInnerClass(
        $outer_this);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $1.$clinit = (() => {});
    $1.$loadModules();
    InnerClass.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $1,
    'com.google.j2cl.transpiler.readable.anonymousinnerclass.AnonymousInnerClass$1');



exports = $1;
//# sourceMappingURL=AnonymousInnerClass$1.js.map