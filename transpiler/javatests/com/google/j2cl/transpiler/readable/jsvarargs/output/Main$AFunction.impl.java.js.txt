goog.module('com.google.j2cl.transpiler.readable.jsvarargs.Main.AFunction$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const $JavaScriptFunction = goog.require('vmbootstrap.JavaScriptFunction$impl');


class AFunction extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {function(number, ...*):*}
   * @public
   */
  static $create__() {
    AFunction.$clinit();
    let $instance = new AFunction();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction__();
    return $Util.$makeLambdaFunction(
        AFunction.prototype.m_f1__int__arrayOf_java_lang_Object, $instance,
        AFunction.$copy);
  }

  /**
   * @suppress {invalidCasts}
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @this {?function(number, ...*):*}
   * @param {number} i
   * @param {...*} args
   * @return {*}
   * @public
   */
  m_f1__int__arrayOf_java_lang_Object(i, ...args) {
    return args[i];
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    AFunction.$clinit = (() => {});
    AFunction.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$is__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AFunction);
  }

  /**
   * @param {AFunction} from
   * @param {?} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction = true;
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    AFunction, 'com.google.j2cl.transpiler.readable.jsvarargs.Main$AFunction');


$JavaScriptFunction.$markImplementor(AFunction);


exports = AFunction;
//# sourceMappingURL=Main$AFunction.js.map