goog.module('com.google.j2cl.transpiler.readable.jsvarargs.Main$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsvarargs.Main.AFunction$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let List = goog.forwardDeclare('java.util.List$impl');
let InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Main extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {number} */
    this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main = 0;
  }

  /**
   * @param {number} f
   * @return {!Main}
   * @public
   */
  static $create__int(f) {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main__int(f);
    return $instance;
  }

  /**
   * @param {number} f
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main__int(f) {
    this.$ctor__java_lang_Object__();
    this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main = f;
  }

  /**
   * @param {number} multiplier
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  static f1(multiplier, ...numbers) {
    Main.$clinit();
    $Arrays.$stampType(numbers, $int, 1);
    return numbers.length + numbers[0] + multiplier;
  }

  /**
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  static f2(...numbers) {
    Main.$clinit();
    $Arrays.$stampType(numbers, $int, 1);
    return numbers.length + numbers[0];
  }

  /**
   * @param {number} m
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  f3(m, ...numbers) {
    $Arrays.$stampType(numbers, $int, 1);
    return this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main +
        m + numbers[1];
  }

  /**
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  f4(...numbers) {
    $Arrays.$stampType(numbers, $int, 1);
    return this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main +
        numbers[1];
  }

  /**
   * @template T
   * @param {...T} elements
   * @return {T}
   * @public
   */
  static generics(...elements) {
    Main.$clinit();
    return elements[0];
  }

  /**
   * @param {...List<Main>} elements
   * @return {Main}
   * @public
   */
  static parameterizedType(...elements) {
    Main.$clinit();
    $Arrays.$stampType(elements, List, 1);
    return /**@type {Main} */ ($Casts.$to(elements[0].getAtIndex(0), Main));
  }

  /**
   * @template T
   * @param {...List<T>} elements
   * @return {T}
   * @public
   */
  static parameterizedByT(...elements) {
    Main.$clinit();
    $Arrays.$stampType(elements, List, 1);
    return elements[0].getAtIndex(0);
  }

  /**
   * @return {void}
   * @public
   */
  m_testStaticMethodNotFirst__() {
    Main.f1(1, 1, 2);
    Main.f1(1, 1, 2);
    Main.f1(1);
    Main.f1(1);
    Main.f1(1, 1, 2);
    Main.f1(1, 1, 2);
    Main.f1(1);
    Main.f1(1);
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    Main.f1(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
    Main.f1(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
    Main.f1(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object(null));
  }

  /**
   * @return {void}
   * @public
   */
  m_testStaticMethodFirst__() {
    Main.f2(1, 2);
    Main.generics(Integer.m_valueOf__int(1), Integer.m_valueOf__int(2));
    Main.f2(1, 2);
    Main.generics(Integer.m_valueOf__int(1), Integer.m_valueOf__int(2));
    Main.f2();
    Main.generics();
    Main.f2();
    Main.generics();
    Main.generics();
    Main.f2(1, 2);
    Main.f2(1, 2);
    Main.generics(/**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int)));
    Main.generics(Integer.m_valueOf__int(1), Integer.m_valueOf__int(2));
    Main.f2();
    Main.f2();
    Main.generics(/**@type {!Array<number>} */ ($Arrays.$init([], $int)));
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    let integers = /**@type {!Array<Integer>} */ ($Arrays.$init(
        [Integer.m_valueOf__int(1), Integer.m_valueOf__int(2)], Integer));
    Main.f2(...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
    Main.f2(...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
    Main.generics(
        ...InternalPreconditions.m_checkNotNull__java_lang_Object(integers));
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceMethodNotFirst__() {
    let m = Main.$create__int(1);
    m.f3(1, 1, 2);
    m.f3(1);
    m.f3(1, 1, 2);
    m.f3(1);
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    m.f3(1, ...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceMethodFirst__() {
    let m = Main.$create__int(1);
    m.f4(1, 2);
    m.f4();
    m.f4(1, 2);
    m.f4();
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    m.f4(...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
  }

  /**
   * @return {void}
   * @public
   */
  m_testJsFunction__() {
    let a = AFunction.$create__();
    let o1 = j_l_Object.$create__();
    let o2 = j_l_Object.$create__();
    a(0, o1, o2);
    a(0);
    a(0, o1, o2);
    a(0);
    let os = [o1, o2];
    a(0, ...InternalPreconditions.m_checkNotNull__java_lang_Object(os));
  }

  /**
   * @return {void}
   * @public
   */
  m_testSideEffect__() {
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    Main.$create__int(1).f3(
        1, ...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
  }

  /**
   * @return {void}
   * @public
   */
  m_testNullJsVarargs__() {
    let ints = null;
    Main.f2(...InternalPreconditions.m_checkNotNull__java_lang_Object(ints));
  }

  /**
   * @template U
   * @return {void}
   * @public
   */
  m_testGenericJsFunctionWithVarags__() {
    let function_1 = ((/** U */ n, .../** ...U */ param) => {
      return /**@type {*} */ (param);
    });
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Main.$clinit = (() => {});
    Main.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @public
   */
  static $loadModules() {
    AFunction = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsvarargs.Main.AFunction$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    List = goog.module.get('java.util.List$impl');
    InternalPreconditions =
        goog.module.get('javaemul.internal.InternalPreconditions$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
  }
};

$Util.$setClassMetadata(
    Main, 'com.google.j2cl.transpiler.readable.jsvarargs.Main');



exports = Main;
//# sourceMappingURL=Main.js.map