goog.module('com.google.j2cl.transpiler.readable.typeannotations.AbstractType$impl');


const ParametricType = goog.require('com.google.j2cl.transpiler.readable.typeannotations.ParametricType$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let List = goog.forwardDeclare('java.util.List$impl');
let Map = goog.forwardDeclare('java.util.Map$impl');


/**
 * @abstract
 * @implements {ParametricType<AbstractType>}
 */
class AbstractType extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_typeannotations_AbstractType__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {!List<!Map<!Array<string>, Map<Array<!List<string>>,
   *     !Array<?string>>>>} arg0
   * @return {!List<AbstractType>}
   * @public
   */
  m_m__java_util_List(arg0) {
    return /**@type {!List<AbstractType>} */ (
        ParametricType
            .m_m__$default__com_google_j2cl_transpiler_readable_typeannotations_ParametricType__java_util_List(
                this, arg0));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    AbstractType.$clinit = (() => {});
    AbstractType.$loadModules();
    j_l_Object.$clinit();
    ParametricType.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractType;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractType);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    AbstractType,
    'com.google.j2cl.transpiler.readable.typeannotations.AbstractType');


ParametricType.$markImplementor(AbstractType);


exports = AbstractType;
//# sourceMappingURL=AbstractType.js.map