goog.module('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$LambdaAdaptor$2$impl');


const Cmp2 = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Cmp2$impl');
const Serial = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Serial$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template T
 * @implements {Cmp2<T>}
 * @implements {Serial}
 */
class $LambdaAdaptor$2 extends j_l_Object {
  /**
   * @param {?function(number):number} fn
   * @public
   */
  constructor(fn) {
    $LambdaAdaptor$2.$clinit();
    super();
    /** @public {?function(number):number} */
    this.f_$$fn__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2;
    this.$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2__com_google_j2cl_transpiler_readable_intersectiontype_Cmp2_$JsFunction(
        fn);
  }

  /**
   * @param {?function(number):number} fn
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2__com_google_j2cl_transpiler_readable_intersectiontype_Cmp2_$JsFunction(
      fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2 =
        fn;
  }

  /**
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_cmp__int(arg0) {
    let /** ?function(number):number */ $function;
    return (
        $function =
            this.f_$$fn__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$2,
        $function(arg0));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $LambdaAdaptor$2.$clinit = (() => {});
    $LambdaAdaptor$2.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $LambdaAdaptor$2;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$2);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $LambdaAdaptor$2,
    'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$$LambdaAdaptor$2');


Cmp2.$markImplementor($LambdaAdaptor$2);
Serial.$markImplementor($LambdaAdaptor$2);


exports = $LambdaAdaptor$2;
//# sourceMappingURL=IntersectionTypeTest$$LambdaAdaptor$2.js.map