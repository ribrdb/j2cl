goog.module('com.google.j2cl.transpiler.readable.interfaces.Main.Interface$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfaces.Main.Interface.$LambdaAdaptor$impl');


/**
 * @interface
 * @template T
 */
class Interface {
  /**
   * @abstract
   * @return {void}
   * @public
   */
  m_interfaceMethod__() {}

  /**
   * @abstract
   * @param {T} t
   * @return {void}
   * @public
   */
  m_defaultMethod__java_lang_Object(t) {}

  /**
   * @return {void}
   * @public
   */
  static m_staticInterfaceMethod__() {
    Interface.$clinit();
  }

  /**
   * @template T
   * @param {?function():void} fn
   * @return {Interface<T>}
   * @public
   */
  static $adapt(fn) {
    Interface.$clinit();
    return /**@type {!$LambdaAdaptor<T>} */ (new $LambdaAdaptor(fn));
  }

  /**
   * @template T
   * @param {!Interface<T>} $thisArg
   * @param {T} t
   * @return {void}
   * @public
   */
  static m_defaultMethod__$default__com_google_j2cl_transpiler_readable_interfaces_Main_Interface__java_lang_Object(
      $thisArg, t) {
    Interface.$clinit();
    Interface
        .m_privateMethod__$private__com_google_j2cl_transpiler_readable_interfaces_Main_Interface__java_lang_Object_$p_com_google_j2cl_transpiler_readable_interfaces_Main_Interface(
            $thisArg, t);
  }

  /**
   * @template T
   * @param {!Interface<T>} $thisArg
   * @param {T} t
   * @return {void}
   * @public
   */
  static m_privateMethod__$private__com_google_j2cl_transpiler_readable_interfaces_Main_Interface__java_lang_Object_$p_com_google_j2cl_transpiler_readable_interfaces_Main_Interface(
      $thisArg, t) {
    Interface.$clinit();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Interface.$clinit = (() => {});
    Interface.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_interfaces_Main_Interface =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_interfaces_Main_Interface;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_interfaces_Main_Interface;
  }

  /**
   * @public
   */
  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.interfaces.Main.Interface.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    Interface, 'com.google.j2cl.transpiler.readable.interfaces.Main$Interface');


/** @public {number} @const */
Interface.f_a__com_google_j2cl_transpiler_readable_interfaces_Main_Interface =
    1;


/** @public {number} @const */
Interface.f_b__com_google_j2cl_transpiler_readable_interfaces_Main_Interface =
    2;


Interface.$markImplementor(/** @type {Function} */ (Interface));


exports = Interface;
//# sourceMappingURL=Main$Interface.js.map