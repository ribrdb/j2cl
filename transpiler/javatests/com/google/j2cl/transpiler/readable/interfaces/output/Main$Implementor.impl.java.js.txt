goog.module('com.google.j2cl.transpiler.readable.interfaces.Main.Implementor$impl');


const Interface = goog.require('com.google.j2cl.transpiler.readable.interfaces.Main.Interface$impl');
const SubInterface = goog.require('com.google.j2cl.transpiler.readable.interfaces.Main.SubInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfaces.Main$impl');


/**
 * @implements {SubInterface}
 * @implements {Interface<?string>}
 */
class Implementor extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_interfaces_Main_Implementor;
  }

  /**
   * @param {Main} $outer_this
   * @return {!Implementor}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_interfaces_Main(
      $outer_this) {
    Implementor.$clinit();
    let $instance = new Implementor();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_interfaces_Main_Implementor__com_google_j2cl_transpiler_readable_interfaces_Main(
            $outer_this);
    return $instance;
  }

  /**
   * @param {Main} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_interfaces_Main_Implementor__com_google_j2cl_transpiler_readable_interfaces_Main(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_interfaces_Main_Implementor =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_interfaceMethod__() {}

  /**
   * Default method forwarding stub.
   * @override
   * @param {?string} arg0
   * @return {void}
   * @public
   */
  m_defaultMethodX__java_lang_String(arg0) {
    SubInterface
        .m_defaultMethodX__$default__com_google_j2cl_transpiler_readable_interfaces_Main_SubInterface__java_lang_String(
            this, arg0);
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {?string} arg0
   * @return {void}
   * @public
   */
  m_defaultMethod__java_lang_Object(arg0) {
    Interface
        .m_defaultMethod__$default__com_google_j2cl_transpiler_readable_interfaces_Main_Interface__java_lang_Object(
            this, arg0);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Implementor.$clinit = (() => {});
    Implementor.$loadModules();
    j_l_Object.$clinit();
    SubInterface.$clinit();
    Interface.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Implementor;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Implementor);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    Implementor,
    'com.google.j2cl.transpiler.readable.interfaces.Main$Implementor');


SubInterface.$markImplementor(Implementor);
Interface.$markImplementor(Implementor);


exports = Implementor;
//# sourceMappingURL=Main$Implementor.js.map