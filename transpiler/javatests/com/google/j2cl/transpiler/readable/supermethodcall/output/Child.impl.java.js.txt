goog.module('com.google.j2cl.transpiler.readable.supermethodcall.Child$impl');


const Parent = goog.require('com.google.j2cl.transpiler.readable.supermethodcall.Parent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class Child extends Parent {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!Child}
   * @public
   */
  static $create__() {
    Child.$clinit();
    let $instance = new Child();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_supermethodcall_Child__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_supermethodcall_Child__() {
    this.$ctor__com_google_j2cl_transpiler_readable_supermethodcall_Parent__();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_parentSimplest__() {
    super.m_parentSimplest__();
  }

  /**
   * @override
   * @param {number} foo
   * @return {void}
   * @public
   */
  m_parentWithParams__int(foo) {
    super.m_parentWithParams__int(foo);
  }

  /**
   * @override
   * @return {Child}
   * @public
   */
  m_parentWithChangingReturn__() {
    super.m_parentWithChangingReturn__();
    return this;
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_grandParentSimplest__() {
    super.m_grandParentSimplest__();
  }

  /**
   * @override
   * @param {number} foo
   * @return {void}
   * @public
   */
  m_grandParentWithParams__int(foo) {
    super.m_grandParentWithParams__int(foo);
  }

  /**
   * @override
   * @return {Child}
   * @public
   */
  m_grandParentWithChangingReturn__() {
    super.m_grandParentWithChangingReturn__();
    return this;
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Child.$clinit = (() => {});
    Child.$loadModules();
    Parent.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Child;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Child);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    Child, 'com.google.j2cl.transpiler.readable.supermethodcall.Child');



exports = Child;
//# sourceMappingURL=Child.js.map