goog.module('com.google.j2cl.transpiler.readable.cast.Casts$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Serializable = goog.forwardDeclare('java.io.Serializable$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class Casts extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!Casts}
   * @public
   */
  static $create__() {
    Casts.$clinit();
    let $instance = new Casts();
    $instance.$ctor__com_google_j2cl_transpiler_readable_cast_Casts__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_cast_Casts__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  m_testCastToClass__() {
    let o = j_l_Object.$create__();
    let c = /**@type {Casts} */ ($Casts.$to(o, Casts));
  }

  /**
   * @return {void}
   * @public
   */
  m_testCasToInterface__() {
    let o = j_l_Object.$create__();
    let s = /**@type {(Serializable|Array)} */ ($Casts.$to(o, Serializable));
  }

  /**
   * @return {void}
   * @public
   */
  m_testCastToBoxedType__() {
    let o = Integer.$create__int(1);
    let b = /**@type {Byte} */ ($Casts.$to(o, Byte));
    let d = /**@type {?number} */ ($Casts.$to(o, Double));
    let f = /**@type {Float} */ ($Casts.$to(o, Float));
    let i = /**@type {Integer} */ ($Casts.$to(o, Integer));
    let l = /**@type {Long} */ ($Casts.$to(o, Long));
    let s = /**@type {Short} */ ($Casts.$to(o, Short));
    let n = /**@type {(Number|number)} */ ($Casts.$to(o, Number));
    let c = /**@type {Character} */ ($Casts.$to(o, Character));
    let bool = /**@type {?boolean} */ ($Casts.$to(o, Boolean));
  }

  /**
   * @return {void}
   * @public
   */
  m_testCastToArray__() {
    let foo = /**@type {Array<*>} */ (null);
    let bar = /**@type {Array<Array<*>>} */ (null);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Casts.$clinit = (() => {});
    Casts.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Casts;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Casts);
  }

  /**
   * @public
   */
  static $loadModules() {
    Serializable = goog.module.get('java.io.Serializable$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Number = goog.module.get('java.lang.Number$impl');
    Short = goog.module.get('java.lang.Short$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    Casts, 'com.google.j2cl.transpiler.readable.cast.Casts');



exports = Casts;
//# sourceMappingURL=Casts.js.map