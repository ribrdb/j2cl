goog.module('com.google.j2cl.transpiler.readable.externs.Main$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Inner = goog.forwardDeclare('com.google.j2cl.transpiler.readable.externs.Main.FooImpl');
let FooImpl = goog.forwardDeclare('com.google.j2cl.transpiler.readable.externs.Main.FooImpl$impl');
let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.externs.Main.FooOverlay.$Overlay$impl');
let Inner_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.externs.Main.TopLevelExtern.Inner.$Overlay$impl');
let InnerExtern_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.externs.Main.TopLevelExtern.InnerExtern.$Overlay$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class Main extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {Foo} */
    this.f_aFoo__com_google_j2cl_transpiler_readable_externs_Main;
    /** @public {TopLevelExtern.InnerExtern} */
    this.f_innerExtern__com_google_j2cl_transpiler_readable_externs_Main;
    /** @public {Inner} */
    this.f_inner__com_google_j2cl_transpiler_readable_externs_Main;
  }

  /**
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__com_google_j2cl_transpiler_readable_externs_Main__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_externs_Main__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {Foo} fooOverlay
   * @return {boolean}
   * @public
   */
  static m_testFooOverlay__com_google_j2cl_transpiler_readable_externs_Main_FooOverlay_$p_com_google_j2cl_transpiler_readable_externs_Main(
      fooOverlay) {
    Main.$clinit();
    return j_l_String.m_equals__java_lang_String__java_lang_Object(
        fooOverlay.foo, 'Hello');
  }

  /**
   * @param {*} fooOverlay
   * @return {void}
   * @public
   */
  // native static
  // m_useDirectlyAsFoo__java_lang_Object_$p_com_google_j2cl_transpiler_readable_externs_Main(fooOverlay)

  /**
   * @param {Array<?string>} args
   * @return {void}
   * @public
   */
  static m_main__arrayOf_java_lang_String(args) {
    Main.$clinit();
    Main.m_testFooOverlay__com_google_j2cl_transpiler_readable_externs_Main_FooOverlay_$p_com_google_j2cl_transpiler_readable_externs_Main(
        /**@type {Foo} */ ($Casts.$to(FooImpl.$create__(), $Overlay)));
    Main.m_useDirectlyAsFoo__java_lang_Object_$p_com_google_j2cl_transpiler_readable_externs_Main(
        FooImpl.$create__());
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Main.$clinit = (() => {});
    Main.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @public
   */
  static $loadModules() {
    FooImpl = goog.module.get(
        'com.google.j2cl.transpiler.readable.externs.Main.FooImpl$impl');
    $Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.externs.Main.FooOverlay.$Overlay$impl');
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    Main, 'com.google.j2cl.transpiler.readable.externs.Main');



/* NATIVE.JS EPILOG */

const com_google_j2cl_transpiler_readable_externs_Main = Main;

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @param {Foo} foo
 * @returns {string}
 */
function useFoo(foo) {
  return foo.foo;
}

/**
 * @param {*} foo
 * @return {void}
 * @public
 */
Main.m_useDirectlyAsFoo__java_lang_Object_$p_com_google_j2cl_transpiler_readable_externs_Main =
    function(foo) {
  useFoo(/** @type {Foo} */ (foo));
};

exports = Main;
//# sourceMappingURL=Main.js.map