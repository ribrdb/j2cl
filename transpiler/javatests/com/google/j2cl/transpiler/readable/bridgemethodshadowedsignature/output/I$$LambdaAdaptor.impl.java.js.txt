goog.module('com.google.j2cl.transpiler.readable.bridgemethodshadowedsignature.I.$LambdaAdaptor$impl');


const I = goog.require('com.google.j2cl.transpiler.readable.bridgemethodshadowedsignature.I$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Consumer = goog.forwardDeclare('java.util.function.Consumer$impl');


/**
 * @template I1
 * @implements {I<I1>}
 */
class $LambdaAdaptor extends j_l_Object {
  /**
   * @param {?function(Consumer<?>):?string} fn
   * @public
   */
  constructor(fn) {
    $LambdaAdaptor.$clinit();
    super();
    /** @public {?function(Consumer<?>):?string} */
    this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$LambdaAdaptor;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$LambdaAdaptor__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$JsFunction(
        fn);
  }

  /**
   * @param {?function(Consumer<?>):?string} fn
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$LambdaAdaptor__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$JsFunction(
      fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$LambdaAdaptor =
        fn;
  }

  /**
   * @param {Consumer<?>} arg0
   * @return {?string}
   * @public
   */
  m_get__java_util_function_Consumer(arg0) {
    let /** ?function(Consumer<?>):?string */ $function;
    return (
        $function =
            this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethodshadowedsignature_I_$LambdaAdaptor,
        $function(arg0));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $LambdaAdaptor.$clinit = (() => {});
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $LambdaAdaptor;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $LambdaAdaptor,
    'com.google.j2cl.transpiler.readable.bridgemethodshadowedsignature.I$$LambdaAdaptor');


I.$markImplementor($LambdaAdaptor);


exports = $LambdaAdaptor;
//# sourceMappingURL=I$$LambdaAdaptor.js.map