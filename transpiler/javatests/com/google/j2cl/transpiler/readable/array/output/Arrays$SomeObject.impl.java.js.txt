goog.module('com.google.j2cl.transpiler.readable.array.Arrays.SomeObject$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Arrays = goog.forwardDeclare('com.google.j2cl.transpiler.readable.array.Arrays$impl');


class SomeObject extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {Arrays} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_array_Arrays_SomeObject;
  }

  /**
   * @param {Arrays} $outer_this
   * @return {!SomeObject}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_array_Arrays(
      $outer_this) {
    SomeObject.$clinit();
    let $instance = new SomeObject();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_array_Arrays_SomeObject__com_google_j2cl_transpiler_readable_array_Arrays(
            $outer_this);
    return $instance;
  }

  /**
   * @param {Arrays} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_array_Arrays_SomeObject__com_google_j2cl_transpiler_readable_array_Arrays(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_array_Arrays_SomeObject =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    SomeObject.$clinit = (() => {});
    SomeObject.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SomeObject;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeObject);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    SomeObject, 'com.google.j2cl.transpiler.readable.array.Arrays$SomeObject');



exports = SomeObject;
//# sourceMappingURL=Arrays$SomeObject.js.map