goog.module('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Y$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Y.$LambdaAdaptor$impl');


/**
 * @interface
 */
class Y {
  /**
   * @abstract
   * @return {void}
   * @public
   */
  m_n__() {}

  /**
   * @param {?function():void} fn
   * @return {Y}
   * @public
   */
  static $adapt(fn) {
    Y.$clinit();
    return new $LambdaAdaptor(fn);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Y.$clinit = (() => {});
    Y.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Y =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Y;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Y;
  }

  /**
   * @public
   */
  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Y.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    Y, 'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$Y');


Y.$markImplementor(/** @type {Function} */ (Y));


exports = Y;
//# sourceMappingURL=TypeWildCards$Y.js.map