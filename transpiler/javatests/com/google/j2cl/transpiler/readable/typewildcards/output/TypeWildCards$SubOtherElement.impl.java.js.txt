goog.module('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.SubOtherElement$impl');


const HasKey = goog.require('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.HasKey$impl');
const OtherElement = goog.require('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.OtherElement$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let TypeWildCards = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$impl');


/**
 * @abstract
 * @implements {HasKey}
 */
class SubOtherElement extends OtherElement {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {TypeWildCards} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_SubOtherElement;
  }

  /**
   * @param {TypeWildCards} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_SubOtherElement__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_SubOtherElement =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_OtherElement__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
        $outer_this);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    SubOtherElement.$clinit = (() => {});
    SubOtherElement.$loadModules();
    OtherElement.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SubOtherElement;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SubOtherElement);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    SubOtherElement,
    'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$SubOtherElement');


HasKey.$markImplementor(SubOtherElement);


exports = SubOtherElement;
//# sourceMappingURL=TypeWildCards$SubOtherElement.js.map