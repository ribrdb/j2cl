goog.module('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let HashFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');
let $1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$1$impl');
let $2 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$2$impl');
let Enum = goog.forwardDeclare('java.lang.Enum$impl');


class HashFunctions extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!HashFunctions}
   * @public
   */
  static $create__() {
    HashFunctions.$clinit();
    let $instance = new HashFunctions();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @template T
   * @return {HashFunction<T>}
   * @public
   */
  static m_hashFunction__() {
    HashFunctions.$clinit();
    return /**@type {!$1<T>} */ ($1.$create__());
  }

  /**
   * @template T
   * @return {HashFunction<T>}
   * @public
   */
  static m_enumHashFunction__() {
    HashFunctions.$clinit();
    return /**@type {!$2<T>} */ ($2.$create__());
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    HashFunctions.$clinit = (() => {});
    HashFunctions.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof HashFunctions;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, HashFunctions);
  }

  /**
   * @public
   */
  static $loadModules() {
    $1 = goog.module.get(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$1$impl');
    $2 = goog.module.get(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$2$impl');
  }
};

$Util.$setClassMetadata(
    HashFunctions,
    'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions');



exports = HashFunctions;
//# sourceMappingURL=HashFunctions.js.map