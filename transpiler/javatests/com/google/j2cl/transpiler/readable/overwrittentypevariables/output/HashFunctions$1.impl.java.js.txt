goog.module('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$1$impl');


const HashFunction = goog.require('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template T
 * @implements {HashFunction<T>}
 */
class $1 extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template T
   * @return {!$1<T>}
   * @public
   */
  static $create__() {
    $1.$clinit();
    let $instance = new $1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions_1__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions_1__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @param {T} input
   * @return {?string}
   * @public
   */
  m_apply__java_lang_Object(input) {
    return '';
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $1.$clinit = (() => {});
    $1.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $1,
    'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$1');


HashFunction.$markImplementor($1);


exports = $1;
//# sourceMappingURL=HashFunctions$1.js.map