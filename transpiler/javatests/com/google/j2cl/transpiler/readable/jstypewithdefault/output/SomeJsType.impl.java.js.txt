goog.module('com.google.j2cl.transpiler.readable.jstypewithdefault.SomeJsType$impl');


const Interface = goog.require('com.google.j2cl.transpiler.readable.jstypewithdefault.Interface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {Interface}
 */
class SomeJsType extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!SomeJsType}
   * @public
   */
  static $create__() {
    SomeJsType.$clinit();
    let $instance = new SomeJsType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jstypewithdefault_SomeJsType__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jstypewithdefault_SomeJsType__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @return {void}
   * @public
   */
  defaultMethod() {
    Interface
        .m_defaultMethod__$default__com_google_j2cl_transpiler_readable_jstypewithdefault_Interface(
            this);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    SomeJsType.$clinit = (() => {});
    SomeJsType.$loadModules();
    j_l_Object.$clinit();
    Interface.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SomeJsType;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeJsType);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    SomeJsType,
    'com.google.j2cl.transpiler.readable.jstypewithdefault.SomeJsType');


Interface.$markImplementor(SomeJsType);


exports = SomeJsType;
//# sourceMappingURL=SomeJsType.js.map