goog.module('com.google.j2cl.transpiler.readable.genericanddefaultmethods.ConcreteClass$impl');


const GenericClass = goog.require('com.google.j2cl.transpiler.readable.genericanddefaultmethods.GenericClass$impl');
const InterfaceWithDefault = goog.require('com.google.j2cl.transpiler.readable.genericanddefaultmethods.InterfaceWithDefault$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @extends {GenericClass<?string>}
 * @implements {InterfaceWithDefault}
 */
class ConcreteClass extends GenericClass {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!ConcreteClass}
   * @public
   */
  static $create__() {
    ConcreteClass.$clinit();
    let $instance = new ConcreteClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_genericanddefaultmethods_ConcreteClass__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_genericanddefaultmethods_ConcreteClass__() {
    this.$ctor__com_google_j2cl_transpiler_readable_genericanddefaultmethods_GenericClass__();
  }

  /**
   * Bridge method.
   * @override
   * @param {?string} arg0
   * @return {void}
   * @public
   */
  m_foo__java_lang_String(arg0) {
    super.m_foo__java_lang_Object(arg0);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    ConcreteClass.$clinit = (() => {});
    ConcreteClass.$loadModules();
    GenericClass.$clinit();
    InterfaceWithDefault.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof ConcreteClass;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ConcreteClass);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    ConcreteClass,
    'com.google.j2cl.transpiler.readable.genericanddefaultmethods.ConcreteClass');


InterfaceWithDefault.$markImplementor(ConcreteClass);


exports = ConcreteClass;
//# sourceMappingURL=ConcreteClass.js.map