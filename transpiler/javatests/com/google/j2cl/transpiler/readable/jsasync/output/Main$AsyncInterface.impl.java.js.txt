goog.module('com.google.j2cl.transpiler.readable.jsasync.Main.AsyncInterface$impl');


const BaseInterface = goog.require('com.google.j2cl.transpiler.readable.jsasync.Main.BaseInterface$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsasync.Main.AsyncInterface.$LambdaAdaptor$impl');
let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsasync.Main.IThenable.$Overlay$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');


/**
 * @interface
 * @extends {BaseInterface}
 */
class AsyncInterface {
  /**
   * @abstract
   * @override
   * @return {IThenable<Integer>}
   * @public
   */
  m_asyncCall__() {}

  /**
   * @param {?function():IThenable<Integer>} fn
   * @return {AsyncInterface}
   * @public
   */
  static $adapt(fn) {
    AsyncInterface.$clinit();
    return new $LambdaAdaptor(fn);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    AsyncInterface.$clinit = (() => {});
    AsyncInterface.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    BaseInterface.$markImplementor(classConstructor);
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_jsasync_Main_AsyncInterface;
  }

  /**
   * @public
   */
  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsasync.Main.AsyncInterface.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    AsyncInterface,
    'com.google.j2cl.transpiler.readable.jsasync.Main$AsyncInterface');


AsyncInterface.$markImplementor(/** @type {Function} */ (AsyncInterface));


exports = AsyncInterface;
//# sourceMappingURL=Main$AsyncInterface.js.map