goog.module('com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeJsType.$Overlay$impl');
let NativeObject_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeObject.$Overlay$impl');
let NativeJsType = goog.forwardDeclare('test.foo.NativeJsType');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class CastToNativeType extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!CastToNativeType}
   * @public
   */
  static $create__() {
    CastToNativeType.$clinit();
    let $instance = new CastToNativeType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let a = new NativeJsType();
    let b = /**@type {NativeJsType} */ ($Casts.$to(a, $Overlay));
    let c = $Overlay.$isInstance(a);
    let d = /**@type {Array<NativeJsType>} */ ($Arrays.$castToNative(a));
    c = $Arrays.$instanceIsOfNative(a);
    let e = /**@type {Object} */ ($Casts.$to(a, NativeObject_$Overlay));
    let f =
        /**@type {Object<?string, *>} */ ($Casts.$to(a, NativeObject_$Overlay));
    c = NativeObject_$Overlay.$isInstance(a);
    let g = /**@type {Array<Object>} */ ($Arrays.$castToNative(a));
    let h = /**@type {Array<Object<?string, *>>} */ ($Arrays.$castToNative(a));
    c = $Arrays.$instanceIsOfNative(a);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    CastToNativeType.$clinit = (() => {});
    CastToNativeType.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof CastToNativeType;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, CastToNativeType);
  }

  /**
   * @public
   */
  static $loadModules() {
    $Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeJsType.$Overlay$impl');
    NativeObject_$Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeObject.$Overlay$impl');
    NativeJsType = goog.module.get('test.foo.NativeJsType');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    CastToNativeType,
    'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType');



exports = CastToNativeType;
//# sourceMappingURL=CastToNativeType.js.map