goog.module('com.google.j2cl.transpiler.readable.ternaryexpression.TernaryExpression$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');


class TernaryExpression extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!TernaryExpression}
   * @public
   */
  static $create__() {
    TernaryExpression.$clinit();
    let $instance = new TernaryExpression();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_ternaryexpression_TernaryExpression__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_ternaryexpression_TernaryExpression__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let a = true;
    let number_1 = a ? 1 : 2;
    let b = number_1 == 1 ? number_1 == 2 : number_1 == 1;
    let value = (b ? Integer.$create__int(15) : Integer.$create__int(30))
                    .m_intValue__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    TernaryExpression.$clinit = (() => {});
    TernaryExpression.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof TernaryExpression;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, TernaryExpression);
  }

  /**
   * @public
   */
  static $loadModules() {
    Integer = goog.module.get('java.lang.Integer$impl');
  }
};

$Util.$setClassMetadata(
    TernaryExpression,
    'com.google.j2cl.transpiler.readable.ternaryexpression.TernaryExpression');



exports = TernaryExpression;
//# sourceMappingURL=TernaryExpression.js.map