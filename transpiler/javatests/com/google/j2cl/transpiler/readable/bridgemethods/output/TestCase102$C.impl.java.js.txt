goog.module('com.google.j2cl.transpiler.readable.bridgemethods.TestCase102.C$impl');


const B = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.TestCase102.B$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let TestCase102 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgemethods.TestCase102$impl');


/**
 * @template B1
 * @extends {B<B1>}
 */
class C extends B {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {TestCase102} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102_C;
  }

  /**
   * @template B1
   * @param {TestCase102} $outer_this
   * @return {!C<B1>}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102(
      $outer_this) {
    C.$clinit();
    let $instance = new C();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102_C__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102(
            $outer_this);
    return $instance;
  }

  /**
   * @param {TestCase102} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102_C__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102_C =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102_B__();
  }

  /**
   * @override
   * @param {?string} value
   * @return {void}
   * @public
   */
  set(value) {}

  /**
   * @override
   * @param {B1} value
   * @return {void}
   * @public
   */
  m_set__java_lang_Object(value) {}

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {?string} arg0
   * @return {void}
   * @public
   */
  m_set__java_lang_String(arg0) {
    this.set(arg0);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    C.$clinit = (() => {});
    C.$loadModules();
    B.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof C;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, C);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    C, 'com.google.j2cl.transpiler.readable.bridgemethods.TestCase102$C');



exports = C;
//# sourceMappingURL=TestCase102$C.js.map