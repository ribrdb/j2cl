goog.module('com.google.j2cl.transpiler.readable.bridgemethods.DualUnrelatedBridges$impl');


const SomeInterface = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.SomeInterface$impl');
const SomeOtherFooInterface = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.SomeOtherFooInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Double = goog.forwardDeclare('java.lang.Double$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @implements {SomeInterface<?string, ?number>}
 * @implements {SomeOtherFooInterface<?string>}
 */
class DualUnrelatedBridges extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!DualUnrelatedBridges}
   * @public
   */
  static $create__() {
    DualUnrelatedBridges.$clinit();
    let $instance = new DualUnrelatedBridges();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethods_DualUnrelatedBridges__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_DualUnrelatedBridges__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {?string} s
   * @param {?number} n
   * @return {void}
   * @public
   */
  m_foo__java_lang_String__java_lang_Double(s, n) {}

  /**
   * @param {?string} s
   * @param {(Number|number)} n
   * @return {void}
   * @public
   */
  m_foo__java_lang_String__java_lang_Number(s, n) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(arg0, arg1) {
    this.m_foo__java_lang_String__java_lang_Double(
        /**@type {?string} */ ($Casts.$to(arg0, j_l_String)),
        /**@type {?number} */ ($Casts.$to(arg1, Double)));
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {(Number|number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Number(arg0, arg1) {
    this.m_foo__java_lang_String__java_lang_Number(
        /**@type {?string} */ ($Casts.$to(arg0, j_l_String)), arg1);
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {?number} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Double(arg0, arg1) {
    this.m_foo__java_lang_String__java_lang_Double(
        /**@type {?string} */ ($Casts.$to(arg0, j_l_String)), arg1);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    DualUnrelatedBridges.$clinit = (() => {});
    DualUnrelatedBridges.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof DualUnrelatedBridges;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, DualUnrelatedBridges);
  }

  /**
   * @public
   */
  static $loadModules() {
    Double = goog.module.get('java.lang.Double$impl');
    j_l_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    DualUnrelatedBridges,
    'com.google.j2cl.transpiler.readable.bridgemethods.DualUnrelatedBridges');


SomeInterface.$markImplementor(DualUnrelatedBridges);
SomeOtherFooInterface.$markImplementor(DualUnrelatedBridges);


exports = DualUnrelatedBridges;
//# sourceMappingURL=DualUnrelatedBridges.js.map