goog.module('com.google.j2cl.transpiler.readable.bridgemethods.Parent$impl');


const SuperParent = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.SuperParent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Error = goog.forwardDeclare('java.lang.Error$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template T
 * @extends {SuperParent<T, (Number|number)>}
 */
class Parent extends SuperParent {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template T
   * @return {!Parent<T>}
   * @public
   */
  static $create__() {
    Parent.$clinit();
    let $instance = new Parent();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethods_Parent__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_Parent__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethods_SuperParent__();
  }

  /**
   * @param {T} t
   * @param {(Number|number)} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Error__java_lang_Number(t, s) {}

  /**
   * @template T_1
   * @param {T_1} t
   * @return {void}
   * @public
   */
  m_bar__java_lang_Number(t) {}

  /**
   * @template T_1
   * @param {T_1} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object(t) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(arg0, arg1) {
    this.m_foo__java_lang_Error__java_lang_Number(
        /**@type {T} */ ($Casts.$to(arg0, Error)),
        /**@type {(Number|number)} */ ($Casts.$to(arg1, Number)));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Parent.$clinit = (() => {});
    Parent.$loadModules();
    SuperParent.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Parent;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Parent);
  }

  /**
   * @public
   */
  static $loadModules() {
    Error = goog.module.get('java.lang.Error$impl');
    Number = goog.module.get('java.lang.Number$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
  }
};

$Util.$setClassMetadata(
    Parent, 'com.google.j2cl.transpiler.readable.bridgemethods.Parent');



exports = Parent;
//# sourceMappingURL=Parent.js.map