goog.module('com.google.j2cl.transpiler.readable.autoboxing.AutoBoxing.$2Local$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let $Long = goog.forwardDeclare('nativebootstrap.Long$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');


/**
 * @template T, T_1
 */
class $2Local extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template T, T_1
   * @return {!$2Local<T, T_1>}
   * @public
   */
  static $create__() {
    $2Local.$clinit();
    let $instance = new $2Local();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_autoboxing_AutoBoxing_2Local__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_autoboxing_AutoBoxing_2Local__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {T} l
   * @return {!$Long}
   * @public
   */
  m_toLong__java_lang_Long_$pp_com_google_j2cl_transpiler_readable_autoboxing(
      l) {
    $Asserts.$assert(
        /**@type {Long} */ (l).equals(Long.m_valueOf__long($Long.fromInt(11))));
    return /**@type {Long} */ (l).m_longValue__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $2Local.$clinit = (() => {});
    $2Local.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $2Local;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $2Local);
  }

  /**
   * @public
   */
  static $loadModules() {
    Long = goog.module.get('java.lang.Long$impl');
    $Long = goog.module.get('nativebootstrap.Long$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
  }
};

$Util.$setClassMetadata(
    $2Local,
    'com.google.j2cl.transpiler.readable.autoboxing.AutoBoxing$2Local');



exports = $2Local;
//# sourceMappingURL=AutoBoxing$2Local.js.map