goog.module('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.B$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class B extends A {
  /**
   * JsConstructor 'B(int)'.
   * @param {number} x
   * @public
   */
  constructor(x) {
    B.$clinit();
    super();
    /** @public {number} */
    this.f_fB__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B =
        0;
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B__int(
        x);
  }

  /**
   * Initialization from constructor 'B(int)'.
   * @param {number} x
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B__int(
      x) {
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_A__int(
        x + 1);
    this.$init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B();
    this.f_fB__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B =
        3;
  }

  /**
   * Factory method corresponding to constructor 'B()'.
   * @return {!B}
   * @public
   */
  static $create__() {
    B.$clinit();
    let $instance = new B(10);
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B__();
    return $instance;
  }

  /**
   * Initialization from constructor 'B()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B__() {
    this.f_fB__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B =
        4;
  }

  /**
   * Factory method corresponding to constructor 'B(int, int)'.
   * @param {number} x
   * @param {number} y
   * @return {!B}
   * @public
   */
  static $create__int__int(x, y) {
    B.$clinit();
    let $instance = new B(x + y);
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B__int__int(
            x, y);
    return $instance;
  }

  /**
   * Initialization from constructor 'B(int, int)'.
   * @param {number} x
   * @param {number} y
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B__int__int(
      x, y) {
    this.f_fB__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B =
        x * y;
  }

  /**
   * @return {void}
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B() {
    this.f_fB__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_B =
        2;
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    B.$clinit = (() => {});
    B.$loadModules();
    A.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof B;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, B);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    B,
    'com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$B');



exports = B;
//# sourceMappingURL=JsConstructorClass$B.js.map