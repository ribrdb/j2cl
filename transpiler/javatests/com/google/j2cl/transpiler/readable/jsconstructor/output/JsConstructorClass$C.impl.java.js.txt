goog.module('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.C$impl');


const B = goog.require('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.B$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class C extends B {
  /**
   * JsConstructor 'C(int)'.
   * @param {number} x
   * @public
   */
  constructor(x) {
    C.$clinit();
    super(x * 2);
    /** @public {number} */
    this.f_fC__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C =
        0;
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C__int(
        x);
  }

  /**
   * Initialization from constructor 'C(int)'.
   * @param {number} x
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C__int(
      x) {
    this.$init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C();
    this.f_fC__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C =
        6;
  }

  /**
   * Factory method corresponding to constructor 'C(int, int)'.
   * @param {number} x
   * @param {number} y
   * @return {!C}
   * @public
   */
  static $create__int__int(x, y) {
    C.$clinit();
    let $instance = new C(x + y);
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C__int__int(
            x, y);
    return $instance;
  }

  /**
   * Initialization from constructor 'C(int, int)'.
   * @param {number} x
   * @param {number} y
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C__int__int(
      x, y) {
    this.f_fC__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C =
        7;
  }

  /**
   * @return {void}
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C() {
    this.f_fC__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_C =
        1;
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    C.$clinit = (() => {});
    C.$loadModules();
    B.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof C;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, C);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    C,
    'com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$C');



exports = C;
//# sourceMappingURL=JsConstructorClass$C.js.map