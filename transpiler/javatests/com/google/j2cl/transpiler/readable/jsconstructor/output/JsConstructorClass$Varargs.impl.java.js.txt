goog.module('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.Varargs$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Varargs extends A {
  /**
   * @param {...number} args
   * @public
   */
  constructor(...args) {
    Varargs.$clinit();
    $Arrays.$stampType(args, $int, 1);
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_Varargs__arrayOf_int(
        args);
  }

  /**
   * @param {Array<number>} args
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_Varargs__arrayOf_int(
      args) {
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_A__int(
        args[1]);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Varargs.$clinit = (() => {});
    Varargs.$loadModules();
    A.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Varargs;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Varargs);
  }

  /**
   * @public
   */
  static $loadModules() {
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
  }
};

$Util.$setClassMetadata(
    Varargs,
    'com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$Varargs');



exports = Varargs;
//# sourceMappingURL=JsConstructorClass$Varargs.js.map