goog.module('com.google.j2cl.transpiler.readable.jsoverlay.Main$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let NativeJsTypeInterfaceWithOverlay_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeInterfaceWithOverlay.$Overlay$impl');
let NativeJsTypeInterfaceWithOverlayImpl = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeInterfaceWithOverlayImpl$impl');
let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeWithOverlay.$Overlay$impl');
let j_l_String = goog.forwardDeclare('java.lang.String$impl');
let NativeJsTypeWithOverlay = goog.forwardDeclare('test.foo.NativeJsTypeWithOverlay');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Main extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__com_google_j2cl_transpiler_readable_jsoverlay_Main__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsoverlay_Main__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let n = new NativeJsTypeWithOverlay();
    $Overlay
        .m_callM__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay(
            n);
    $Overlay.m_fun__();
    NativeJsTypeWithOverlay.n();
    $Overlay
        .m_bar___$p_com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$Overlay();
    $Overlay
        .m_foo__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$p_com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$Overlay(
            n);
    let a =
        $Overlay
            .f_COMPILE_TIME_CONSTANT__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$Overlay +
        NativeJsTypeWithOverlay.nonJsOverlayField;
    $Overlay
        .f_staticField__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$Overlay =
        null;
    $Overlay.m_varargs__arrayOf_int(
        /**@type {!Array<number>} */ ($Arrays.$init([1, 2, 3], $int)));
    $Overlay
        .m_baz__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$p_com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$Overlay(
            n);
    let foo = NativeJsTypeInterfaceWithOverlayImpl.$create__();
    foo.m();
    NativeJsTypeInterfaceWithOverlay_$Overlay
        .m_callM__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeInterfaceWithOverlay(
            foo);
    let b =
        j_l_String.m_valueOf__java_lang_Object(
            NativeJsTypeInterfaceWithOverlay_$Overlay
                .f_COMPILE_TIME_CONSTANT__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeInterfaceWithOverlay_$Overlay) +
        j_l_String.m_valueOf__java_lang_Object(
            NativeJsTypeInterfaceWithOverlay_$Overlay
                .f_staticField__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeInterfaceWithOverlay_$Overlay);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Main.$clinit = (() => {});
    Main.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @public
   */
  static $loadModules() {
    NativeJsTypeInterfaceWithOverlay_$Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeInterfaceWithOverlay.$Overlay$impl');
    NativeJsTypeInterfaceWithOverlayImpl = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeInterfaceWithOverlayImpl$impl');
    $Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeWithOverlay.$Overlay$impl');
    j_l_String = goog.module.get('java.lang.String$impl');
    NativeJsTypeWithOverlay =
        goog.module.get('test.foo.NativeJsTypeWithOverlay');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
  }
};

$Util.$setClassMetadata(
    Main, 'com.google.j2cl.transpiler.readable.jsoverlay.Main');



exports = Main;
//# sourceMappingURL=Main.js.map