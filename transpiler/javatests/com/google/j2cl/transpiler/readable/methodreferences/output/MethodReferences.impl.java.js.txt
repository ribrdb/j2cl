goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let ArrayProducer = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ArrayProducer$impl');
let BiFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.BiFunction$impl');
let MethodReferences_Function = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function$impl');
let ObjectCapturingOuter = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ObjectCapturingOuter$impl');
let Predicate = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Predicate$impl');
let Producer = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Objects = goog.forwardDeclare('vmbootstrap.Objects$impl');


/**
 * @template T
 */
class MethodReferences extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template T
   * @return {!MethodReferences<T>}
   * @public
   */
  static $create__() {
    MethodReferences.$clinit();
    let $instance = new MethodReferences();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {*}
   * @public
   */
  static m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences() {
    MethodReferences.$clinit();
    return j_l_Object.$create__();
  }

  /**
   * @return {?boolean}
   * @public
   */
  m_isA__() {
    return true;
  }

  /**
   * @return {*}
   * @public
   */
  m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences() {
    return this;
  }

  /**
   * @param {(Number|number)} n
   * @return {?boolean}
   * @public
   */
  m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
      n) {
    return false;
  }

  /**
   * @return {void}
   * @public
   */
  m_main___$pp_com_google_j2cl_transpiler_readable_methodreferences() {
    let /** MethodReferences<T> */ $$q, /** MethodReferences<*> */ $$q_1,
        /** MethodReferences<*> */ $$q_2;
    let objectFactory = Producer.$adapt((() => {
      return j_l_Object.$create__();
    }));
    objectFactory = Producer.$adapt((() => {
      return MethodReferences
          .m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences();
    }));
    objectFactory =
        ($$q =
             /**@type {!MethodReferences<T>} */ (MethodReferences.$create__()),
         Producer.$adapt((() => {
           return $$q.m_isA__();
         })));
    let biFunction =
        /**@type {BiFunction<MethodReferences<T>, (Number|number), ?boolean>} */
        (BiFunction.$adapt(((arg0, arg1) => {
          let arg0_1 = /**@type {MethodReferences} */ (
              $Casts.$to(arg0, MethodReferences));
          let arg1_1 = /**@type {(Number|number)} */ ($Casts.$to(arg1, Number));
          return arg0_1
              .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
                  arg1_1);
        })));
    let functionWithParameters = MethodReferences_Function.$adapt(((arg0_2) => {
      let arg0_3 = /**@type {(Number|number)} */ ($Casts.$to(arg0_2, Number));
      return this
          .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
              arg0_3);
    }));
    let objectPredicate = /**@type {Predicate<MethodReferences<T>>} */ (
        Predicate.$adapt(((arg0_4) => {
          let arg0_5 = /**@type {MethodReferences} */ (
              $Casts.$to(arg0_4, MethodReferences));
          return Boolean.m_booleanValue__java_lang_Boolean(arg0_5.m_isA__());
        })));
    let objectCapturingOuterProducer =
        /**@type {Producer<ObjectCapturingOuter<T>>} */ (Producer
                                                             .$adapt((() => {
                                                               return /**@type {!ObjectCapturingOuter<T>} */ (ObjectCapturingOuter.$create__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(this));
                                                             })));
    let arrayProducer = ArrayProducer.$adapt(((/** number */ arg0_6) => {
      return /**@type {!Array<?number>} */ ($Arrays.$create([arg0_6], Double));
    }));
    objectFactory =
        ($$q_1 =
             /**@type {!MethodReferences<*>} */ (MethodReferences.$create__()),
         Producer.$adapt((() => {
           return $$q_1
               .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
         })));
    let function_1 =
        /**@type {MethodReferences_Function<MethodReferences<T>, *>} */
        (MethodReferences_Function.$adapt(((arg0_7) => {
          let arg0_8 = /**@type {MethodReferences} */ (
              $Casts.$to(arg0_7, MethodReferences));
          return arg0_8
              .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
        })));
    let arrayFactory = MethodReferences_Function.$adapt(((arg0_9) => {
      let arg0_10 = /**@type {Integer} */ ($Casts.$to(arg0_9, Integer));
      return new Array(arg0_10.m_intValue__());
    }));
    let superToStringProducer = Producer.$adapt((() => {
      return j_l_Object.prototype.toString.call(this);
    }));
    let jsobjectFactory = (() => {
      return j_l_Object.$create__();
    });
    jsobjectFactory = (() => {
      return MethodReferences
          .m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences();
    });
    jsobjectFactory =
        ($$q_2 =
             /**@type {!MethodReferences<*>} */ (MethodReferences.$create__()),
         (() => {
           return $$q_2
               .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
         }));
    let jsfunction = ((arg0_11) => {
      let arg0_12 = /**@type {MethodReferences} */ (
          $Casts.$to(arg0_11, MethodReferences));
      return arg0_12
          .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
    });
    let jsarrayFactory = ((arg0_13) => {
      let arg0_14 = /**@type {Integer} */ ($Casts.$to(arg0_13, Integer));
      return new Array(arg0_14.m_intValue__());
    });
    let jsSuperToStringProducer = (() => {
      return j_l_Object.prototype.toString.call(this);
    });
    let jsbiFunction = ((arg0_15, arg1_2) => {
      let arg0_16 = /**@type {MethodReferences} */ (
          $Casts.$to(arg0_15, MethodReferences));
      let arg1_3 = /**@type {(Number|number)} */ ($Casts.$to(arg1_2, Number));
      return arg0_16
          .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
              arg1_3);
    });
    let jsFunctionWithParameters = ((arg0_17) => {
      let arg0_18 = /**@type {(Number|number)} */ ($Casts.$to(arg0_17, Number));
      return this
          .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
              arg0_18);
    });
  }

  /**
   * @return {Producer<?string>}
   * @public
   */
  static get f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences() {
    return (
        MethodReferences.$clinit(),
        MethodReferences
            .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences);
  }

  /**
   * @param {Producer<?string>} value
   * @return {void}
   * @public
   */
  static set f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      value) {
    (MethodReferences.$clinit(),
     MethodReferences
         .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences =
         value);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    let /** * */ $$q;
    MethodReferences.$clinit = (() => {});
    MethodReferences.$loadModules();
    j_l_Object.$clinit();
    MethodReferences
        .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences =
        ($$q =
             MethodReferences
                 .m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences(),
         Producer.$adapt((() => {
           return $Objects.m_toString__java_lang_Object($$q);
         })));
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MethodReferences;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MethodReferences);
  }

  /**
   * @public
   */
  static $loadModules() {
    ArrayProducer = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ArrayProducer$impl');
    BiFunction = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.BiFunction$impl');
    MethodReferences_Function = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function$impl');
    ObjectCapturingOuter = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ObjectCapturingOuter$impl');
    Predicate = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Predicate$impl');
    Producer = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Number = goog.module.get('java.lang.Number$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $Objects = goog.module.get('vmbootstrap.Objects$impl');
  }
};

$Util.$setClassMetadata(
    MethodReferences,
    'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences');


/** @private {Producer<?string>} */
MethodReferences
    .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences;



exports = MethodReferences;
//# sourceMappingURL=MethodReferences.js.map