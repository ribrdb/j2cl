goog.module('com.google.j2cl.transpiler.readable.switchstatement.Numbers$impl');


const Enum = goog.require('java.lang.Enum$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Enums = goog.forwardDeclare('vmbootstrap.Enums$impl');


/**
 * @extends {Enum<Numbers>}
 */
class Numbers extends Enum {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @param {?string} $name
   * @param {number} $ordinal
   * @return {!Numbers}
   * @public
   */
  static $create__java_lang_String__int($name, $ordinal) {
    let $instance = new Numbers();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_switchstatement_Numbers__java_lang_String__int(
            $name, $ordinal);
    return $instance;
  }

  /**
   * @param {?string} $name
   * @param {number} $ordinal
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_switchstatement_Numbers__java_lang_String__int(
      $name, $ordinal) {
    this.f_name__java_lang_Enum_ = $name;
    this.f_ordinal__java_lang_Enum_ = $ordinal;
    this.$ctor__java_lang_Enum__java_lang_String__int($name, $ordinal);
  }

  /**
   * @param {string} name
   * @return {!Numbers}
   * @public
   */
  static m_valueOf__java_lang_String(name) {
    Numbers.$clinit();
    if ($Equality.$same(
            Numbers
                .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_,
            null)) {
      Numbers
          .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_ =
          $Enums.createMapFromValues(Numbers.m_values__());
    }
    return $Enums.getValueFromNameAndMap(
        name,
        Numbers
            .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_);
  }

  /**
   * @return {!Array<!Numbers>}
   * @public
   */
  static m_values__() {
    Numbers.$clinit();
    return /**@type {!Array<Numbers>} */ ($Arrays.$init(
        [
          Numbers
              .$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers,
          Numbers
              .$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers
        ],
        Numbers));
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {number}
   * @public
   */
  m_compareTo__java_lang_Object(arg0) {
    return super.compareTo(/**@type {Numbers} */ ($Casts.$to(arg0, Numbers)));
  }

  /**
   * @return {!Numbers}
   * @public
   */
  static get f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers() {
    return (
        Numbers.$clinit(),
        Numbers
            .$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers);
  }

  /**
   * @param {!Numbers} value
   * @return {void}
   * @public
   */
  static set f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers(
      value) {
    (Numbers.$clinit(),
     Numbers
         .$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers =
         value);
  }

  /**
   * @return {!Numbers}
   * @public
   */
  static get f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers() {
    return (
        Numbers.$clinit(),
        Numbers
            .$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers);
  }

  /**
   * @param {!Numbers} value
   * @return {void}
   * @public
   */
  static set f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers(
      value) {
    (Numbers.$clinit(),
     Numbers
         .$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers =
         value);
  }

  /**
   * @return {Map<?string, !Numbers>}
   * @public
   */
  static get f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_() {
    return (
        Numbers.$clinit(),
        Numbers
            .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_);
  }

  /**
   * @param {Map<?string, !Numbers>} value
   * @return {void}
   * @public
   */
  static set f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_(
      value) {
    (Numbers.$clinit(),
     Numbers
         .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_ =
         value);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    Numbers.$clinit = (() => {});
    Numbers.$loadModules();
    Enum.$clinit();
    Numbers
        .$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers =
        Numbers.$create__java_lang_String__int(
            $Util.$makeEnumName('ONE'),
            Numbers
                .$ordinal$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers);
    Numbers
        .$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers =
        Numbers.$create__java_lang_String__int(
            $Util.$makeEnumName('TWO'),
            Numbers
                .$ordinal$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers);
    Numbers
        .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_ =
        null;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Numbers;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Numbers);
  }

  /**
   * @public
   */
  static $loadModules() {
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $Enums = goog.module.get('vmbootstrap.Enums$impl');
  }
};

$Util.$setClassMetadataForEnum(
    Numbers, 'com.google.j2cl.transpiler.readable.switchstatement.Numbers');


/** @private {!Numbers} */
Numbers.$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers;


/** @private {!Numbers} */
Numbers.$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers;


/** @private {Map<?string, !Numbers>} */
Numbers
    .$f_namesToValuesMap__com_google_j2cl_transpiler_readable_switchstatement_Numbers_;


/** @public {number} @const */
Numbers
    .$ordinal$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers =
    0;


/** @public {number} @const */
Numbers
    .$ordinal$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers =
    1;



exports = Numbers;
//# sourceMappingURL=Numbers.js.map