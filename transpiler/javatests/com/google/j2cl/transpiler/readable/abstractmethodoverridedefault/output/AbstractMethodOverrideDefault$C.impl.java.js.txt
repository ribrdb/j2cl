goog.module('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.C$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.A$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class C extends A {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!C}
   * @public
   */
  static $create__() {
    C.$clinit();
    let $instance = new C();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_C__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_C__() {
    this.$ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_A__();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_foo__() {}

  /**
   * @override
   * @return {void}
   * @public
   */
  m_bar__() {
    super.m_bar__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    C.$clinit = (() => {});
    C.$loadModules();
    A.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof C;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, C);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    C,
    'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$C');



exports = C;
//# sourceMappingURL=AbstractMethodOverrideDefault$C.js.map