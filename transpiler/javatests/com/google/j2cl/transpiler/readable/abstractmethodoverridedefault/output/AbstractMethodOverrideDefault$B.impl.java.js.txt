goog.module('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.B$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.A$impl');
const J = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.J$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @abstract
 * @implements {J}
 */
class B extends A {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_B__() {
    this.$ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_A__();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_bar__() {
    if (false) {
      this.m_bar__();
    }
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    B.$clinit = (() => {});
    B.$loadModules();
    A.$clinit();
    J.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof B;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, B);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    B,
    'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$B');


J.$markImplementor(B);


exports = B;
//# sourceMappingURL=AbstractMethodOverrideDefault$B.js.map