goog.module('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.I$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.I.$LambdaAdaptor$impl');


/**
 * @interface
 */
class I {
  /**
   * @abstract
   * @return {void}
   * @public
   */
  m_foo__() {}

  /**
   * @abstract
   * @return {void}
   * @public
   */
  m_bar__() {}

  /**
   * @param {?function():void} fn
   * @return {I}
   * @public
   */
  static $adapt(fn) {
    I.$clinit();
    return new $LambdaAdaptor(fn);
  }

  /**
   * @param {!I} $thisArg
   * @return {void}
   * @public
   */
  static m_bar__$default__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_I(
      $thisArg) {
    I.$clinit();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    I.$clinit = (() => {});
    I.$loadModules();
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_I =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_I;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault_I;
  }

  /**
   * @public
   */
  static $loadModules() {
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.I.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    I,
    'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$I');


I.$markImplementor(/** @type {Function} */ (I));


exports = I;
//# sourceMappingURL=AbstractMethodOverrideDefault$I.js.map