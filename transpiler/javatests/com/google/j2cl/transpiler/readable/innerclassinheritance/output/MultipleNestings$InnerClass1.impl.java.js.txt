goog.module('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1$impl');


const Parent = goog.require('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.Parent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let MultipleNestings = goog.forwardDeclare('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$impl');


class InnerClass1 extends Parent {
  /**
   * @protected
   */
  constructor() {
    super();
    /** @public {MultipleNestings} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1;
  }

  /**
   * @param {MultipleNestings} $outer_this
   * @return {!InnerClass1}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
      $outer_this) {
    InnerClass1.$clinit();
    let $instance = new InnerClass1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
            $outer_this);
    return $instance;
  }

  /**
   * @param {MultipleNestings} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_Parent__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
        $outer_this);
  }

  /**
   * @return {void}
   * @public
   */
  m_funInI1__() {}

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    InnerClass1.$clinit = (() => {});
    InnerClass1.$loadModules();
    Parent.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof InnerClass1;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, InnerClass1);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    InnerClass1,
    'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1');



exports = InnerClass1;
//# sourceMappingURL=MultipleNestings$InnerClass1.js.map