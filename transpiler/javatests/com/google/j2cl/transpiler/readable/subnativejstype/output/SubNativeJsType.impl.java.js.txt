goog.module('com.google.j2cl.transpiler.readable.subnativejstype.SubNativeJsType$impl');


const $Util = goog.require('nativebootstrap.Util$impl');
const MyNativeJsType = goog.require('test.foo.MyNativeJsType');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.subnativejstype.MyNativeJsType.$Overlay$impl');


class SubNativeJsType extends MyNativeJsType {
  /**
   * JsConstructor 'SubNativeJsType(int)'.
   * @param {number} x
   * @public
   */
  constructor(x) {
    SubNativeJsType.$clinit();
    super(x + 1);
    this.$ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__int(
        x);
  }

  /**
   * Initialization from constructor 'SubNativeJsType(int)'.
   * @param {number} x
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__int(
      x) {}

  /**
   * Factory method corresponding to constructor 'SubNativeJsType()'.
   * @return {!SubNativeJsType}
   * @public
   */
  static $create__() {
    SubNativeJsType.$clinit();
    let $instance = new SubNativeJsType(10);
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SubNativeJsType()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_subnativejstype_SubNativeJsType__() {
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    SubNativeJsType.$clinit = (() => {});
    SubNativeJsType.$loadModules();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SubNativeJsType;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SubNativeJsType);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    SubNativeJsType,
    'com.google.j2cl.transpiler.readable.subnativejstype.SubNativeJsType');



exports = SubNativeJsType;
//# sourceMappingURL=SubNativeJsType.js.map