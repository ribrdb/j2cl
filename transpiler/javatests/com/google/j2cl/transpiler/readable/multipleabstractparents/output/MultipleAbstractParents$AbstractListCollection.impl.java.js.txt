goog.module('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.AbstractListCollection$impl');


const Collection = goog.require('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.Collection$impl');
const List = goog.require('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @abstract
 * @template T
 * @implements {List<T>}
 * @implements {Collection<T>}
 */
class AbstractListCollection extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractListCollection__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    AbstractListCollection.$clinit = (() => {});
    AbstractListCollection.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractListCollection;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractListCollection);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    AbstractListCollection,
    'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractListCollection');


List.$markImplementor(AbstractListCollection);
Collection.$markImplementor(AbstractListCollection);


exports = AbstractListCollection;
//# sourceMappingURL=MultipleAbstractParents$AbstractListCollection.js.map