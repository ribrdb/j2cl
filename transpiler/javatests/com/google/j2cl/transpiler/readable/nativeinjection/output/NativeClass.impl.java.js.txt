goog.module('com.google.j2cl.transpiler.readable.nativeinjection.NativeClass$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class NativeClass extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!NativeClass}
   * @public
   */
  static $create__() {
    NativeClass.$clinit();
    let $instance = new NativeClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {?string}
   * @public
   */
  // native m_nativeInstanceMethod__()

  /**
   * @return {NativeClass}
   * @public
   */
  // native static m_nativeStaticMethod__()

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    NativeClass.$clinit = (() => {});
    NativeClass.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof NativeClass;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NativeClass);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    NativeClass,
    'com.google.j2cl.transpiler.readable.nativeinjection.NativeClass');



/* NATIVE.JS EPILOG */

const com_google_j2cl_transpiler_readable_nativeinjection_NativeClass =
    NativeClass;

// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Replaces the native instance method 'nativeInstanceMethod' in NativeClass.
 * @return {string}
 * @public
 */
NativeClass.prototype.m_nativeInstanceMethod__ = function() {
  return 'nativeInstanceMethod';
};

/**
 * Replaces the native static method 'nativeStaticMethod' in NativeClass.
 * @return {NativeClass}
 * @public
 */
NativeClass.m_nativeStaticMethod__ = function() {
  return null;
};


exports = NativeClass;
//# sourceMappingURL=NativeClass.js.map